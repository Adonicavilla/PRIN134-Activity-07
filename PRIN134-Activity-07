// Emoji constants
const TROPHY = String.fromCodePoint(0x1F3C6);
const FIRE = String.fromCodePoint(0x1F525);
const BASKETBALL = String.fromCodePoint(0x1F3C0);

// Player class definition
class Player {
    constructor(name, team) {
        this.name = name;
        this.team = team;
        this.score = 0;
    }
}

// Function to calculate success rate
function calculateSuccessRate() {
    return Math.random() < 0.3;
}

// Function to simulate shots
function simulateShots(attempts) {
    let successfulShots = 0;
    for (let i = 0; i < attempts; i++) {
        if (calculateSuccessRate()) {
            successfulShots++;
        }
    }
    return successfulShots;
}

// Create and initialize players
const players = [
    new Player("James", "Lakers"),
    new Player("Curry", "Warriors"),
    new Player("Jordan", "Bulls"),
    new Player("Bryant", "Lakers"),
    new Player("Durant", "Suns")
];

// Function to display rankings
function displayRankings(players) {
    console.log(`${TROPHY} Rankings after this round:`);
    players.sort((a, b) => b.score - a.score);
    players.forEach((player, index) => {
        console.log(`${index + 1}. ${player.name} - ${player.score} points`);
    });
}

// First round - simulate shots
players.forEach(player => {
    const shots = simulateShots(5); // 5 attempts per player
    player.score = shots;
});

// Display first round rankings
displayRankings(players);

// Check for tie
const tiedPlayers = players.filter(player => player.score === players[0].score);
if (tiedPlayers.length > 1) {
    console.log(`\n${FIRE} Tiebreaker needed between: ${tiedPlayers.map(p => p.name).join(', ')}`);
    
    // Round 2
    console.log(`\n${BASKETBALL} Round 2 Begins!`);
    
    // Reset scores for tied players
    tiedPlayers.forEach(player => {
        player.score = 0;
        const shots = simulateShots(3); // 3 attempts for tiebreaker
        player.score = shots;
        console.log(`${player.name} scored ${shots} successful shots.`);
    });
    
    // Display final rankings
    console.log(`\n${TROPHY} Rankings after this round:`);
    tiedPlayers.sort((a, b) => b.score - a.score);
    tiedPlayers.forEach((player, index) => {
        console.log(`${index + 1}. ${player.name} - ${player.score} points`);
    });
    
    // Announce winner
    console.log(`\n${TROPHY} The champion is ${tiedPlayers[0].name} with ${tiedPlayers[0].score} points!`);
}